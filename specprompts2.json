[
  {
    "full_prompt_text": "Spec Prompt for system/architecture/overview.md and system/architecture/patterns/context-frames.md:\n\nUpdate these documents to clearly capture our revised design for atomic task template matching. In system/architecture/overview.md, add a new section titled \"Template Matching\" that explains that only atomic tasks have templates and that matching is performed heuristically via associative matching tasks. Explain that these tasks use fixed input/output signatures to calculate similarity and that the system always selects the highest-scoring candidate. Include a mermaid flowchart diagram that illustrates the call chain: from the user providing a task description, through context generation (using inherited context, previous outputs, or with context disabled), to the invocation of the Memory System and finally template selection.\n\nIn system/architecture/patterns/context-frames.md, expand the discussion of context inheritance. Add a dedicated subsection that describes the available modes (full, subset, and a new option to disable context entirely). Provide a diagram showing two parallel flows – one where context is inherited and one where the disable context flag is active. Ensure cross-references clearly indicate that these same context semantics apply to associative matching tasks.",
    "files": [
      "system/architecture/overview.md",
      "system/architecture/patterns/context-frames.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for system/architecture/patterns/errors.md and system/architecture/decisions/002-context-management.md:\n\nIn system/architecture/patterns/errors.md, add a section on error handling for associative matching tasks. Specify that if an associative matching task fails or returns only partial output, the system will automatically retry the matching process. Document that any resulting error will include details such as partial outputs and an optional success score (if present) in the \"notes\" field. Enhance this section with a flowchart diagram that shows the error detection, retry, and eventual error propagation steps.\n\nIn system/architecture/decisions/002-context-management.md, insert a new decision item stating that atomic tasks (including associative matching tasks) now have an option to disable context entirely using a dedicated flag. Clarify that the inheritance semantics (full, subset, none) apply uniformly to these tasks. Ensure the decision is presented using a standardized template format and include cross-references to related documents such as the Evaluator documentation.",
    "files": [
      "system/architecture/patterns/errors.md",
      "system/architecture/decisions/002-context-management.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for system/architecture/decisions/005-context-handling.md and system/architecture/questions.md:\n\nIn system/architecture/decisions/005-context-handling.md, update the documentation to clarify that placeholder substitutions (e.g., for '{{variable_name}}') occur prior to task execution for all task types, including associative matching tasks. Document that the 'notes' section in a task result may optionally include a success score, which will be used in future adaptive template matching. Also, specify that if an associative matching task fails, an automatic retry is initiated.\n\nIn system/architecture/questions.md, update the list of open questions by removing those related to operator-specific matching strategies and template versioning. Add a note clarifying that for MVP, the matching strategy is uniform across all atomic tasks, and that any ambiguity or incomplete matching is handled as tool calls by the Handler. Ensure the questions document reflects the current design decisions and clearly marks which issues are deferred for future versions.",
    "files": [
      "system/architecture/decisions/005-context-handling.md",
      "system/architecture/questions.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for components/task-system/spec/types.md and components/task-system/impl/design.md:\n\nIn components/task-system/spec/types.md, update the description of the 'notes' field within TaskResult to indicate that it may now include an optional success score. Emphasize that only atomic tasks have dedicated templates and that composite tasks are composed of multiple atomic tasks. Provide example JSON snippets to illustrate the expected format for ContextGenerationInput and AssociativeMatchResult.\n\nIn components/task-system/impl/design.md, add a new subsection titled \"Task/Template Matching\". This subsection should detail that matching is performed heuristically via user-defined associative matching tasks which work with fixed input/output signatures. Explain that the system selects the highest-scoring candidate and that an option exists to disable context entirely. Include a detailed mermaid flowchart that traces the call chain from user input through the creation of ContextGenerationInput, invocation of MemorySystem.getRelevantContextFor(), scoring of candidate templates, and selection of the final template. Reorganize sections as needed to improve clarity and cross-reference relevant ADRs.",
    "files": [
      "components/task-system/spec/types.md",
      "components/task-system/impl/design.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for components/task-system/spec/behaviors.md and components/task-system/spec/interfaces.md:\n\nIn components/task-system/spec/behaviors.md, expand the \"Task Template Matching\" section. Clearly document that only atomic task templates are used and that associative matching is performed heuristically. Explain that the system selects only the highest-scoring candidate and that, when the 'disable context' flag is enabled, inherited context is omitted. Include a flowchart that summarizes these behaviors and note that the 'notes' field in the task result may contain an optional success score for future adaptive improvements.\n\nIn components/task-system/spec/interfaces.md, update the API documentation for methods such as findMatchingTasks to clearly state that matching applies only to atomic tasks. Formalize the expected structure of the input (ContextGenerationInput) and output (AssociativeMatchResult), and include example definitions. Ensure all references to template matching are consistent with the updated design and that there is no ambiguity regarding operator-specific adjustments or versioning.",
    "files": [
      "components/task-system/spec/behaviors.md",
      "components/task-system/spec/interfaces.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for components/evaluator/README.md and TODOS.md:\n\nIn components/evaluator/README.md, add a new section titled \"Context and Template Matching\". This section should explain that before a task executes, placeholder substitutions are performed and that associative matching tasks follow the same substitution rules. Document that the Evaluator is responsible for extracting an optional success score from the 'notes' field in a task result, which will be used for future adaptive template selection. Include a diagram that illustrates the Evaluator’s role in coordinating context retrieval (via the Memory System) and template matching.\n\nIn TODOS.md, update the list of outstanding tasks to include items for updating all relevant documentation to reflect the new 'disable context' option for atomic tasks, the inclusion of an optional success score in task results, and the uniform matching strategy for atomic tasks. Remove outdated TODOs related to template versioning and operator-specific matching logic, and ensure that all items are consistent with the current design decisions.",
    "files": [
      "components/evaluator/README.md",
      "TODOS.md"
    ]
  }
]
