[
  {
    "full_prompt_text": "Spec Prompt for updating system/architecture/overview.md and system/architecture/patterns/context-frames.md:\n\nOverview.md: \n- Add a new section titled \"Template Matching\" that explains that only atomic tasks have templates and that matching is performed heuristically using associative matching tasks. Include details that the matching always selects the highest-scoring candidate and that an optional \"disable context\" flag is available to completely omit inherited context. Mention that while adaptivity (using a success score stored in the 'notes' field) is planned for future versions, the MVP uses a uniform matching strategy.\n\nContext-frames.md: \n- Expand the discussion on context inheritance by adding a dedicated subsection or table that lists the available inheritance modes: \"full\", \"subset\", and a new option to disable context entirely (e.g., using \"none\" or an explicit 'disable context' flag).\n- Update or add diagrams to show two parallel flows: one for standard context inheritance and one where context is disabled. \n- Cross-reference that these context settings also apply to associative matching tasks, ensuring uniform semantics across atomic tasks.\n\nEnsure that the new sections and diagrams are integrated in a consistent style with the rest of the document.",
    "files": [
      "system/architecture/overview.md",
      "system/architecture/patterns/context-frames.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for updating system/architecture/patterns/errors.md and system/architecture/decisions/002-context-management.md:\n\nPatterns/errors.md: \n- Add a new bullet under the 'Recovery Process' section explaining that if an associative matching task fails (for example, if insufficient context is retrieved), an automatic retry is triggered. \n- Insert a diagram (e.g., a mermaid flowchart) that illustrates the error path for template matching: starting from the Memory System matching call, detecting a failure, automatic retry, and eventual error propagation with inclusion of partial outputs and an optional success score from the 'notes' field.\n\nDecisions/002-context-management.md: \n- Add a new decision item (or subsection) that specifies the introduction of an option to disable context entirely for atomic tasks (and, by extension, for associative matching tasks). \n- Clarify that the same inheritance flags (full, subset, none/disable) apply uniformly to these tasks. \n- Ensure the decision is formatted consistently with the existing ADR template and includes cross-references to relevant evaluator and context handling documentation.\n\nEnsure both documents are updated to reflect these changes and that cross-references are consistent.",
    "files": [
      "system/architecture/patterns/errors.md",
      "system/architecture/decisions/002-context-management.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for updating system/architecture/decisions/005-context-handling.md and system/architecture/questions.md:\n\nDecisions/005-context-handling.md: \n- Clarify that placeholder substitutions (e.g., '{{variable_name}}') are performed before any task executes, including associative matching tasks. \n- Add a note specifying that the 'notes' section in task results may now contain an optional success score, which will later be used to aggregate execution success for adaptive matching.\n- Emphasize that if an associative matching task fails, the system automatically retries, consistent with standard TASK_FAILURE handling.\n\nQuestions.md: \n- Update the open questions by removing any queries regarding operator-specific matching strategies and versioning, since the design now mandates a uniform matching approach for atomic tasks with no versioning.\n- Optionally, add a brief note stating that for MVP the matching strategy is uniform and that future work will explore additional context options if needed.\n\nMake sure both documents clearly reflect the updated context handling and matching error recovery policies.",
    "files": [
      "system/architecture/decisions/005-context-handling.md",
      "system/architecture/questions.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for updating components/task-system/spec/types.md and components/task-system/impl/design.md:\n\nTypes.md: \n- Update the documentation for the 'notes' field within TaskResult to indicate that it may optionally include a success score. Explain that this score will be aggregated over time to support future adaptive template matching.\n- Emphasize in the type definitions that only atomic tasks have individual templates, and that composite expressions are built by sequencing multiple atomic tasks.\n\nDesign.md: \n- Add a dedicated subsection titled \"Task/Template Matching\" that explains in detail that matching is carried out via heuristic associative matching tasks. Specify that there is no precise metric; instead, matching tasks are user-defined with fixed input/output signatures and that the system always selects the highest-scoring candidate.\n- Describe the impact of the 'disable context' flag on the matching process (i.e., that when enabled, the inherited context is omitted from the ContextGenerationInput).\n- Instruct the addition of a detailed mermaid flowchart illustrating the call chain from user input through the Memory System's getRelevantContextFor() invocation, score computation, and final template selection.\n\nEnsure that these updates provide clear, formal definitions and design rationales that are consistent with the overall architectural strategy.",
    "files": [
      "components/task-system/spec/types.md",
      "components/task-system/impl/design.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for updating components/task-system/spec/behaviors.md and components/task-system/spec/interfaces.md:\n\nBehaviors.md: \n- Expand the 'Task Template Matching' section to clearly state that matching is only applied to atomic task templates, is performed heuristically, and that the system selects the highest-scoring candidate. \n- Include details that if the 'disable context' option is enabled, inherited context is omitted from matching, and that the 'notes' field may carry an optional success score.\n- Add a diagram or flowchart summarizing the matching process.\n\nInterfaces.md: \n- Clarify in the documentation for the findMatchingTasks API that matching only applies to atomic task templates and that the input is a ContextGenerationInput. \n- Add a formal description (or mini schema example) of both ContextGenerationInput and AssociativeMatchResult, including expected field types and example JSON formats.\n- Ensure that the descriptions and examples are consistent with the updates made in types.md and design.md regarding atomic tasks and matching logic.\n\nBoth documents should be updated for clarity and consistency, ensuring that the interface specifications precisely reflect the intended matching behavior.",
    "files": [
      "components/task-system/spec/behaviors.md",
      "components/task-system/spec/interfaces.md"
    ]
  },
  {
    "full_prompt_text": "Spec Prompt for updating components/evaluator/README.md and TODOS.md:\n\nEvaluator/README.md: \n- Add a new section titled \"Context and Template Matching\" that explains that before execution, all placeholder substitutions are completed, and that associative matching tasks follow the same substitution rules. \n- Describe how the Evaluator coordinates context retrieval via the Memory System and selects the appropriate atomic task template, including extraction of an optional success score from the 'notes' field for future adaptive behavior.\n- Include a diagram that illustrates the Evaluator's role in this process, showing how context flows from the Memory System to template selection.\n\nTODOS.md: \n- Update the list of pending tasks to include items for updating documentation with the new 'disable context' option and the success score in the 'notes' field.\n- Remove any outdated TODOs related to template versioning and operator-specific matching logic.\n- Add new TODO items to review cross-references and ensure that all architectural documents accurately reflect the uniform matching strategy and the new context handling mechanisms.\n\nEnsure that the evaluator documentation clearly explains the new process and that the TODOS file reflects the current state of the project priorities.",
    "files": [
      "components/evaluator/README.md",
      "TODOS.md"
    ]
  }
]
